<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Parking Dashboard</title>
  <meta name="color-scheme" content="light dark" />
  <style>
    :root{--bg:#0b0c10;--panel:#111217;--text:#e9eef2;--muted:#9aa4ad;--accent:#5dd3ff;--ok:#27c07d;--bad:#ff6b6b;--chip:#20232b;--border:#2a2f3a;--card:#151821;--shadow:0 10px 30px rgba(0,0,0,.35);--warn:#f5a524}
    @media(prefers-color-scheme:light){:root{--bg:#f6f7fb;--panel:#fff;--text:#1a1f2b;--muted:#5b6572;--accent:#006af6;--ok:#0b8e5a;--bad:#cc2e2e;--chip:#eef2f8;--border:#e6e9f0;--card:#fff;--shadow:0 8px 24px rgba(16,24,40,.08);--warn:#b8860b}}
    *{box-sizing:border-box}
    body{margin:0;font:14px ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Noto Sans,Arial;background:linear-gradient(180deg,var(--bg),var(--panel));color:var(--text);min-height:100vh}
    .wrap{max-width:980px;margin:0 auto;padding:24px}
    header{display:flex;gap:16px;align-items:center;justify-content:space-between;flex-wrap:wrap;margin-bottom:16px}
    h1{margin:0;font-size:22px;letter-spacing:.2px}
    .subtitle{color:var(--muted);font-size:13px}
    .statusbar{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .dot{width:10px;height:10px;border-radius:50%;background:var(--accent);box-shadow:0 0 0 3px color-mix(in srgb,var(--accent) 30%, transparent)}
    .badge{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border-radius:999px;background:var(--chip);color:var(--text);border:1px solid var(--border);font-size:12px;white-space:nowrap}
    .btn{appearance:none;border:1px solid var(--border);background:var(--card);color:var(--text);padding:8px 12px;border-radius:10px;cursor:pointer;box-shadow:var(--shadow)}
    .btn.sm{padding:6px 10px;font-size:12px}
    .btn.warn{border-color:var(--bad)}
    .controls{display:flex;gap:10px;align-items:center;flex-wrap:wrap;margin:10px 0 18px}
    .input{background:var(--card);color:var(--text);border:1px solid var(--border);padding:10px 12px;border-radius:10px;min-width:280px}
    .cards{display:grid;grid-template-columns:repeat(1,minmax(0,1fr));gap:10px}
    @media(min-width:720px){.cards{grid-template-columns:repeat(2,minmax(0,1fr))}}
    .card{background:var(--card);border:1px solid var(--border);border-radius:16px;padding:14px;box-shadow:var(--shadow);display:flex;flex-direction:column;gap:8px}
    .toprow{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .right{margin-left:auto;display:flex;gap:6px;flex-wrap:wrap}
    .rego{font-family:ui-monospace,SFMono-Regular,Menlo,Consolas,monospace;background:var(--chip);border:1px solid var(--border);padding:4px 8px;border-radius:8px}
    .name{font-weight:600}
    .unit{color:var(--muted)}
    .row{display:flex;gap:10px;align-items:center;flex-wrap:wrap}
    .editrow{display:flex;gap:8px;align-items:center;margin-top:6px}
    .actions{display:flex;gap:8px;flex-wrap:wrap;margin-top:6px}
    .footer{margin-top:18px;display:flex;justify-content:space-between;align-items:center;gap:12px;flex-wrap:wrap;color:var(--muted);font-size:12px}
    .pill{padding:2px 8px;border-radius:999px;border:1px solid var(--border);background:var(--chip)}
    .empty{text-align:center;padding:40px;border:1px dashed var(--border);border-radius:16px;background:color-mix(in srgb,var(--card) 80%, transparent)}
    .toast{position:fixed;inset:auto 16px 16px auto;background:var(--card);color:var(--text);border:1px solid var(--border);box-shadow:var(--shadow);padding:10px 12px;border-radius:10px;opacity:0;transform:translateY(6px);transition:.25s ease}
    .toast.show{opacity:1;transform:translateY(0)}
    /* Demo lock */
    #lock{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:linear-gradient(180deg,var(--bg),var(--panel));z-index:50}
    #lock .panel{background:var(--card);border:1px solid var(--border);border-radius:14px;padding:20px;box-shadow:var(--shadow);min-width:320px;text-align:center}
    .hint{color:var(--warn);font-size:12px}
  </style>
</head>
<body>
  <!-- Password gate (demo only) -->
  <div id="lock">
    <div class="panel">
      <h2 style="margin:0 0 12px 0;">Enter password</h2>
      <input id="pass" class="input" type="password" placeholder="Password" />
      <div style="margin-top:12px; display:flex; gap:8px; justify-content:center;">
        <button id="unlockBtn" class="btn">Unlock</button>
      </div>
      <p id="lockMsg" class="hint" style="margin-top:10px;display:none;color:#ff8080">Wrong password</p>
      <p class="hint" style="margin-top:6px">Demo lock (password is <strong>password</strong>). Not real security.</p>
    </div>
  </div>

  <div class="wrap" id="app" hidden>
    <header>
      <div>
        <h1>Parking Dashboard</h1>
        <div class="subtitle"><span id="today">—</span></div>
      </div>
      <div class="statusbar">
        <span class="badge" title="Auto-refresh"><span class="dot" id="liveDot"></span> Live</span>
        <button class="btn" id="btnRefresh">Refresh</button>
        <button class="btn" id="btnExport">Export JSON</button>
      </div>
    </header>

    <div class="controls">
      <input class="input" id="q" type="search" placeholder="Search name / unit / email" />
      <span class="badge" id="count">0 bookings</span>
    </div>

    <section class="cards" id="cards"></section>
    <div class="empty" id="empty" hidden>No valid bookings for today.</div>

    <div class="footer">
      <div>Last updated: <span id="updated">—</span></div>
      <div><span class="pill" id="source">data: bookings-today.json</span></div>
    </div>
  </div>

  <div class="toast" id="toast">Data updated</div>

  <script>
    /* ================= CONFIG ================= */
    const DEMO_PASSWORD = "password";

    // Hard-coded webhook (override with ?post= if you want)
    const OVERRIDE_POST_URL = "https://eof2j26m45p8mtm.m.pipedream.net";

    // Refresh interval (ms)
    const REFRESH_EVERY_MS = 5000;

    // Query-string overrides
    const QS = new URLSearchParams(location.search);
    const DATA_URL = QS.get("data") || "bookings-today.json";
    const POST_URL = QS.get("post") || OVERRIDE_POST_URL;
    const SHOW_ALL = QS.get("all") === "1";

    /* ================= STATE ================= */
    let prevHash = null;
    let lastETag = null;
    let all = { date: null, timezone: "Australia/Melbourne", generated_at: null, bookings: [] };

    /* ================= UTIL ================= */
    const escapeHtml = (x)=> String(x||"").replace(/[&<>\"']/g, c=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#039;"}[c]));
    const sha256 = async (str)=>{ const enc=new TextEncoder().encode(str); const buf=await crypto.subtle.digest("SHA-256",enc); return Array.from(new Uint8Array(buf)).map(b=>b.toString(16).padStart(2,"0")).join("") };

    // AU display format (DD-MM-YYYY)
    const fmtAU = (iso)=> {
      try{
        const d = new Date(iso+"T00:00:00");
        const dd = String(d.getDate()).padStart(2,'0');
        const mm = String(d.getMonth()+1).padStart(2,'0');
        const yyyy = d.getFullYear();
        return `${dd}-${mm}-${yyyy}`;
      }catch{return iso||"—"}
    };
    const fmtDateLongAU = (s)=>{ try{ const d=s?new Date(s):new Date(); return new Intl.DateTimeFormat("en-AU",{dateStyle:"full"}).format(d);}catch{return s||"—"} };

    // D/M/YYYY or YYYY-MM-DD -> YYYY-MM-DD
    function normalizeDate(s){
      if(!s) return null;
      const t = String(s).trim();
      if (/^\d{4}-\d{2}-\d{2}$/.test(t)) return t;
      const m = t.match(/^(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})$/);
      if (m){ return `${m[3]}-${String(m[2]).padStart(2,'0')}-${String(m[1]).padStart(2,'0')}`; }
      return null;
    }

    // Parse a field from Slack "originalMessage"
    function fromOriginal(msg, re) {
      if (!msg) return null;
      const m = msg.match(re);
      return m ? String(m[1]).trim() : null;
    }

    // Accept camelCase/snake_case; repair missing fields from originalMessage
    function adaptBooking(b){
      const out = { ...b };

      // Map camelCase -> snake_case
      if (!out.booking_number && b.bookingNumber) out.booking_number = String(b.bookingNumber);
      if (!out.id && b.bookingId) out.id = String(b.bookingId);
      if (!out.unit && b.apartment) out.unit = String(b.apartment);
      if (!out.start_date && b.startDate) out.start_date = normalizeDate(b.startDate) || String(b.startDate);
      if (!out.end_date && b.endDate) out.end_date = normalizeDate(b.endDate) || String(b.endDate);
      if (!out.source_link && b.slackPermalink) out.source_link = b.slackPermalink || "";
      if (!out.vehicle_rego && b.vehicleReg) out.vehicle_rego = String(b.vehicleReg);

      // Clean name (strip Slack asterisks)
      if (out.name) out.name = String(out.name).replace(/^\*\s*|\s*\*$/g, "");

      // Fix booking number if missing/"Details"
      if (!out.booking_number || /^details$/i.test(out.booking_number)) {
        const numFromMsg = fromOriginal(b.originalMessage, /Booking Number:\s*\*?(\d+)\*?/i);
        if (numFromMsg) out.booking_number = numFromMsg;
      }

      // Fill unit if missing/null from originalMessage
      const unitMissing = out.unit == null || String(out.unit).trim().toLowerCase()==="null" || String(out.unit).trim()==="";
      if (unitMissing) {
        const aptFromMsg = fromOriginal(b.originalMessage, /Apartment:\s*\*?([A-Za-z0-9\- ]+)\*?/i);
        if (aptFromMsg) out.unit = aptFromMsg;
      }

      // Normalize dates if present
      if (out.start_date) out.start_date = normalizeDate(out.start_date) || out.start_date;
      if (out.end_date) out.end_date = normalizeDate(out.end_date) || out.end_date;

      // Default status
      if (!out.status) out.status = "valid";

      return out;
    }

    const LS_REGO = "regoOverrides_v1";
    const LS_STATUS = "statusOverrides_v1";
    const getMap = (k)=>{ try{return JSON.parse(localStorage.getItem(k)||"{}")}catch{return{}} };
    const setMap = (k,obj)=> localStorage.setItem(k, JSON.stringify(obj));
    const getOverrideRego = (key)=> getMap(LS_REGO)[key];
    const setOverrideRego = async (key, rego, booking)=>{
      const map=getMap(LS_REGO);
      if(rego) map[key]=rego; else delete map[key];
      setMap(LS_REGO,map);
      if(POST_URL){
        try{ await fetch(POST_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"rego_update",key,rego,booking,at:new Date().toISOString()})}); }catch{}
      }
    };
    const getOverrideStatus = (key)=> getMap(LS_STATUS)[key];
    const setOverrideStatus = async (key, status, booking)=>{
      const map=getMap(LS_STATUS);
      if(status) map[key]=status; else delete map[key];
      setMap(LS_STATUS,map);
      if(POST_URL){
        try{ await fetch(POST_URL,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({action:"status_update",key,status,booking,at:new Date().toISOString()})}); }catch{}
      }
    };

    const makeKey = (b)=> b.id || b.booking_number || `${b.name}|${b.unit}|${b.start_date}|${b.end_date}`;

    // "Today" based on Melbourne time
    const todayYMD = new Date().toLocaleDateString("en-CA", { timeZone: "Australia/Melbourne" }); // YYYY-MM-DD

    const isValidToday = (b) => {
      const key = makeKey(b);
      const localStatus = getOverrideStatus(key);
      const status = (localStatus || b.status || "valid").toLowerCase();
      const start = normalizeDate(b.start_date);
      const end   = normalizeDate(b.end_date);
      const hasDates = !!start && !!end;
      const inRange = hasDates && (start <= todayYMD && todayYMD <= end);
      return status !== "cancelled" && (SHOW_ALL ? true : inRange);
    };

    function hoursUntil(yyyy_mm_dd){
      if(!yyyy_mm_dd) return null;
      const [y,m,d]=yyyy_mm_dd.split("-").map(Number);
      const expiry=new Date(y,m-1,d,23,59,59).getTime();
      const diff=Math.max(0,Math.floor((expiry-Date.now())/(1000*60*60)));
      return diff;
    }

    function regoSection(key, rego, b){
      return `
        <div class="editrow">
          <label class="rego" title="Vehicle rego">${rego?escapeHtml(rego):"—"}</label>
          <input class="input input-rego" value="${escapeHtml(rego)}" placeholder="Enter rego (optional)" maxlength="12" />
          <button class="btn sm btn-save">Save</button>
          <button class="btn sm btn-reset" title="Reset field">Reset</button>
        </div>
      `;
    }

    function render(list){
      const q = document.getElementById("q").value.trim().toLowerCase();
      let filtered = list.filter(isValidToday);
      if(q) filtered = filtered.filter(b => [b.name,b.unit,b.email].join(" ").toLowerCase().includes(q));
      filtered.sort((a,b)=>
        (normalizeDate(a.end_date)||"").localeCompare(normalizeDate(b.end_date)||"") ||
        (a.name||"").localeCompare(b.name||"")
      );

      const cards = document.getElementById("cards");
      cards.innerHTML = "";
      document.getElementById("empty").hidden = !!filtered.length;

      for(const b of filtered){
        const key = makeKey(b);
        const rego = (getOverrideRego(key) || b.vehicle_rego || "").toUpperCase();
        const endIso = normalizeDate(b.end_date);
        const hours = endIso ? hoursUntil(endIso) : null;
        const validLine = endIso ? `Valid until 11:59pm ${fmtAU(endIso)}${hours!==null?` • ~${hours}h left`:""}` : "Valid booking";
        const isCancelled = (getOverrideStatus(key) || b.status || "").toLowerCase() === "cancelled";

        const el = document.createElement("article");
        el.className = "card";
        el.innerHTML = `
          <div class="toprow">
            <span class="badge">🅿️ Parking</span>
            <span class="badge">${escapeHtml(validLine)}</span>
            <div class="right">
              ${b.booking_number ? `<span class="badge" title="Booking #">#${escapeHtml(b.booking_number)}</span>` : ""}
              ${b.source_link ? `<a class="badge" href="${escapeHtml(b.source_link)}" target="_blank" rel="noopener">Slack</a>` : ""}
            </div>
          </div>
          <div class="row">
            <div class="name">${escapeHtml(b.name || "—")}</div>
            <div class="unit">${escapeHtml(b.unit || "")}</div>
          </div>
          ${regoSection(key, rego, b)}
          <div class="actions">
            ${isCancelled
              ? `<button class="btn sm" data-action="undo">Undo cancel</button>`
              : `<button class="btn sm warn" data-action="cancel">Cancel (demo)</button>`}
          </div>
          <div class="hint">${rego ? "" : "No rego on file — add one if known (optional)."}</div>
        `;
        cards.appendChild(el);

        // Wire buttons
        const saveBtn = el.querySelector(".btn-save");
        const resetBtn = el.querySelector(".btn-reset");
        const input = el.querySelector(".input-rego");
        if(saveBtn && input){
          saveBtn.addEventListener("click", async ()=>{
            const val=(input.value||"").trim().toUpperCase();
            await setOverrideRego(key,val,b);
            showToast(val?`Saved rego: ${val}`:"Cleared rego");
            render(list);
          });
        }
        if(resetBtn && input){
          resetBtn.addEventListener("click", ()=>{
            input.value = getOverrideRego(key) || b.vehicle_rego || "";
          });
        }

        const actBtn = el.querySelector("[data-action]");
        if(actBtn){
          actBtn.addEventListener("click", async ()=>{
            const action = actBtn.getAttribute("data-action");
            if(action === "cancel"){
              await setOverrideStatus(key,"cancelled",b);
              showToast("Marked as cancelled (demo)");
              render(list);
            }else if(action === "undo"){
              await setOverrideStatus(key,null,b);
              showToast("Undo cancellation");
              render(list);
            }
          });
        }
      }
      document.getElementById("count").textContent = `${filtered.length} booking${filtered.length===1?"":"s"}`;
    }

    // Cache-busting + ETag polling
    async function load(){
      const src = DATA_URL + (DATA_URL.includes("?") ? `&_=${Date.now()}` : `?t=${Date.now()}`);
      document.getElementById("source").textContent = `data: ${DATA_URL}`;
      try{
        const res = await fetch(src, {
          cache: "no-store",
          headers: lastETag ? { "If-None-Match": lastETag } : {}
        });
        if(res.status === 304){ return; }
        if(!res.ok) throw new Error(res.status+" "+res.statusText);

        lastETag = res.headers.get("ETag") || null;

        const json = await res.json();
        const {date,timezone,generated_at,bookings} = json || {};
        const adapted = Array.isArray(bookings) ? bookings.map(adaptBooking) : [];
        const next = {date, timezone: timezone || "Australia/Melbourne", generated_at, bookings: adapted};
        const hash = await sha256(JSON.stringify(next));

        if(prevHash !== hash){
          all = next;
          render(all.bookings);
          document.getElementById("updated").textContent = fmtDateLongAU(generated_at || new Date().toISOString());
          localStorage.setItem("bookings-cache", JSON.stringify(all));
          if(prevHash) showToast("Data updated");
          prevHash = hash;
        }
      }catch(e){
        const cached = localStorage.getItem("bookings-cache");
        if(cached){
          try{
            const tmp = JSON.parse(cached);
            tmp.bookings = (tmp.bookings||[]).map(adaptBooking);
            all = tmp;
            render(all.bookings);
          }catch{}
        }
        showToast("Offline: showing cached data");
      }
    }

    function exportJson(){
      const regoMap = getMap(LS_REGO);
      const statusMap = getMap(LS_STATUS);
      const merged = all.bookings.map(b=>{
        const k = makeKey(b);
        const rego = regoMap[k];
        const status = statusMap[k];
        return { ...b, ...(rego ? { vehicle_rego: rego } : {}), ...(status ? { status } : {}) };
      });
      const out = {...all, bookings: merged, exported_at:new Date().toISOString()};
      const blob = new Blob([JSON.stringify(out,null,2)],{type:"application/json"});
      const a=document.createElement("a"); a.href=URL.createObjectURL(blob); a.download="bookings-today.json"; a.click(); URL.revokeObjectURL(a.href);
    }

    function startApp(){
      // Header date: ALWAYS dynamic today in Australia/Melbourne
      document.getElementById("today").textContent =
        new Date().toLocaleDateString("en-AU",{dateStyle:"full", timeZone:"Australia/Melbourne"});

      document.getElementById("btnRefresh").addEventListener("click", load);
      document.getElementById("btnExport").addEventListener("click", exportJson);
      document.getElementById("q").addEventListener("input", ()=>render(all.bookings));

      // Live dot pulse
      let on=true; setInterval(()=>{ document.getElementById("liveDot").style.opacity=on?1:.35; on=!on; },800);

      load(); setInterval(load, REFRESH_EVERY_MS);
    }

    // Lock screen
    document.getElementById("unlockBtn").addEventListener("click", ()=>{
      const val = document.getElementById("pass").value;
      if(val === DEMO_PASSWORD){
        document.getElementById("lock").style.display="none";
        document.getElementById("app").hidden=false;
        startApp();
      }else{
        document.getElementById("lockMsg").style.display="block";
      }
    });

    document.getElementById("app").hidden = true;
    document.getElementById("lock").style.display = "flex";

    function showToast(msg){ const t=document.getElementById("toast"); t.textContent=msg||"Data updated"; t.classList.add("show"); setTimeout(()=>t.classList.remove("show"),2500); }
  </script>
</body>
</html>
